
BluetoothM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f4  080044f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044fc  080044fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08004574  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004574  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e379  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d90  00000000  00000000  0002e419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000301b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00030e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002201c  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f294  00000000  00000000  00053a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0e43  00000000  00000000  00062ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  00133b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800447c 	.word	0x0800447c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800447c 	.word	0x0800447c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
if(huart==&huart3)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <HAL_UART_RxCpltCallback+0x48>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d111      	bne.n	80005f8 <HAL_UART_RxCpltCallback+0x34>
{
if(rx == 0x0A)
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_UART_RxCpltCallback+0x4c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b0a      	cmp	r3, #10
 80005da:	d102      	bne.n	80005e2 <HAL_UART_RxCpltCallback+0x1e>
	flag=1;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <HAL_UART_RxCpltCallback+0x50>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
	str1[a]=rx;
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <HAL_UART_RxCpltCallback+0x54>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_UART_RxCpltCallback+0x4c>)
 80005e8:	7811      	ldrb	r1, [r2, #0]
 80005ea:	4a0c      	ldr	r2, [pc, #48]	; (800061c <HAL_UART_RxCpltCallback+0x58>)
 80005ec:	54d1      	strb	r1, [r2, r3]
 a++;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_UART_RxCpltCallback+0x54>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <HAL_UART_RxCpltCallback+0x54>)
 80005f6:	6013      	str	r3, [r2, #0]
}
HAL_UART_Receive_IT(&huart3,&rx,1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	4905      	ldr	r1, [pc, #20]	; (8000610 <HAL_UART_RxCpltCallback+0x4c>)
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <HAL_UART_RxCpltCallback+0x48>)
 80005fe:	f002 fb04 	bl	8002c0a <HAL_UART_Receive_IT>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000d4 	.word	0x200000d4
 8000610:	20000124 	.word	0x20000124
 8000614:	20000118 	.word	0x20000118
 8000618:	20000120 	.word	0x20000120
 800061c:	20000128 	.word	0x20000128

08000620 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
if(htim==&htim3)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d11a      	bne.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x46>
{
	sprintf(buffer,"%i EEE Day 2023.\r\n",i);
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4910      	ldr	r1, [pc, #64]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000638:	4810      	ldr	r0, [pc, #64]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800063a:	f003 fab1 	bl	8003ba0 <siprintf>
	i++;
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000646:	6013      	str	r3, [r2, #0]
		len=strlen(buffer);
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800064a:	f7ff fde1 	bl	8000210 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000654:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3,buffer,len,100);
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	b29a      	uxth	r2, r3
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	4907      	ldr	r1, [pc, #28]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000662:	f002 fa40 	bl	8002ae6 <HAL_UART_Transmit>
}
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c
 8000674:	200001cc 	.word	0x200001cc
 8000678:	08004494 	.word	0x08004494
 800067c:	20000168 	.word	0x20000168
 8000680:	20000164 	.word	0x20000164
 8000684:	200000d4 	.word	0x200000d4

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fb8c 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f8c0 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f9a4 	bl	80009e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000698:	f000 f92a 	bl	80008f0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f976 	bl	800098c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3,&rx,1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	4954      	ldr	r1, [pc, #336]	; (80007f4 <main+0x16c>)
 80006a4:	4854      	ldr	r0, [pc, #336]	; (80007f8 <main+0x170>)
 80006a6:	f002 fab0 	bl	8002c0a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80006aa:	4854      	ldr	r0, [pc, #336]	; (80007fc <main+0x174>)
 80006ac:	f001 fd9c 	bl	80021e8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flag==1)
 80006b0:	4b53      	ldr	r3, [pc, #332]	; (8000800 <main+0x178>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d1fb      	bne.n	80006b0 <main+0x28>
	  		{
	  			a=0;
 80006b8:	4b52      	ldr	r3, [pc, #328]	; (8000804 <main+0x17c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	  	HAL_Delay(50);
 80006be:	2032      	movs	r0, #50	; 0x32
 80006c0:	f000 fbe4 	bl	8000e8c <HAL_Delay>
	  	for(j=0;j<60;j++){
 80006c4:	4b50      	ldr	r3, [pc, #320]	; (8000808 <main+0x180>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	e03d      	b.n	8000748 <main+0xc0>

	  		if((str1[j]=='L')  &&  (str1[j+1]=='E')  &&  (str1[j+2]=='D')  &&  (str1[j+3]=='O')  &&  (str1[j+4]=='N') ){
 80006cc:	4b4e      	ldr	r3, [pc, #312]	; (8000808 <main+0x180>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a4e      	ldr	r2, [pc, #312]	; (800080c <main+0x184>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	2b4c      	cmp	r3, #76	; 0x4c
 80006d6:	d132      	bne.n	800073e <main+0xb6>
 80006d8:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <main+0x180>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a4b      	ldr	r2, [pc, #300]	; (800080c <main+0x184>)
 80006e0:	5cd3      	ldrb	r3, [r2, r3]
 80006e2:	2b45      	cmp	r3, #69	; 0x45
 80006e4:	d12b      	bne.n	800073e <main+0xb6>
 80006e6:	4b48      	ldr	r3, [pc, #288]	; (8000808 <main+0x180>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3302      	adds	r3, #2
 80006ec:	4a47      	ldr	r2, [pc, #284]	; (800080c <main+0x184>)
 80006ee:	5cd3      	ldrb	r3, [r2, r3]
 80006f0:	2b44      	cmp	r3, #68	; 0x44
 80006f2:	d124      	bne.n	800073e <main+0xb6>
 80006f4:	4b44      	ldr	r3, [pc, #272]	; (8000808 <main+0x180>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3303      	adds	r3, #3
 80006fa:	4a44      	ldr	r2, [pc, #272]	; (800080c <main+0x184>)
 80006fc:	5cd3      	ldrb	r3, [r2, r3]
 80006fe:	2b4f      	cmp	r3, #79	; 0x4f
 8000700:	d11d      	bne.n	800073e <main+0xb6>
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <main+0x180>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3304      	adds	r3, #4
 8000708:	4a40      	ldr	r2, [pc, #256]	; (800080c <main+0x184>)
 800070a:	5cd3      	ldrb	r3, [r2, r3]
 800070c:	2b4e      	cmp	r3, #78	; 0x4e
 800070e:	d116      	bne.n	800073e <main+0xb6>
	  		//HAL_Delay(1000);
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	483e      	ldr	r0, [pc, #248]	; (8000810 <main+0x188>)
 8000716:	f000 ff15 	bl	8001544 <HAL_GPIO_WritePin>
	  		for(j=0;j<60;j++){str1[j]=0;}
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <main+0x180>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	e009      	b.n	8000736 <main+0xae>
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <main+0x180>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a39      	ldr	r2, [pc, #228]	; (800080c <main+0x184>)
 8000728:	2100      	movs	r1, #0
 800072a:	54d1      	strb	r1, [r2, r3]
 800072c:	4b36      	ldr	r3, [pc, #216]	; (8000808 <main+0x180>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a35      	ldr	r2, [pc, #212]	; (8000808 <main+0x180>)
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <main+0x180>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b3b      	cmp	r3, #59	; 0x3b
 800073c:	ddf1      	ble.n	8000722 <main+0x9a>
	  	for(j=0;j<60;j++){
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <main+0x180>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a30      	ldr	r2, [pc, #192]	; (8000808 <main+0x180>)
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <main+0x180>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b3b      	cmp	r3, #59	; 0x3b
 800074e:	ddbd      	ble.n	80006cc <main+0x44>

	  	}}

	  	for(j=0;j<60;j++){
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <main+0x180>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e044      	b.n	80007e2 <main+0x15a>

	  		if((str1[j]=='L')  &&  (str1[j+1]=='E')  &&  (str1[j+2]=='D')  &&  (str1[j+3]=='O')  &&  (str1[j+4]=='F')  &&  (str1[j+5]=='F') ){
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <main+0x180>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a2b      	ldr	r2, [pc, #172]	; (800080c <main+0x184>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	2b4c      	cmp	r3, #76	; 0x4c
 8000762:	d139      	bne.n	80007d8 <main+0x150>
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <main+0x180>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a28      	ldr	r2, [pc, #160]	; (800080c <main+0x184>)
 800076c:	5cd3      	ldrb	r3, [r2, r3]
 800076e:	2b45      	cmp	r3, #69	; 0x45
 8000770:	d132      	bne.n	80007d8 <main+0x150>
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <main+0x180>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3302      	adds	r3, #2
 8000778:	4a24      	ldr	r2, [pc, #144]	; (800080c <main+0x184>)
 800077a:	5cd3      	ldrb	r3, [r2, r3]
 800077c:	2b44      	cmp	r3, #68	; 0x44
 800077e:	d12b      	bne.n	80007d8 <main+0x150>
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <main+0x180>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3303      	adds	r3, #3
 8000786:	4a21      	ldr	r2, [pc, #132]	; (800080c <main+0x184>)
 8000788:	5cd3      	ldrb	r3, [r2, r3]
 800078a:	2b4f      	cmp	r3, #79	; 0x4f
 800078c:	d124      	bne.n	80007d8 <main+0x150>
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <main+0x180>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3304      	adds	r3, #4
 8000794:	4a1d      	ldr	r2, [pc, #116]	; (800080c <main+0x184>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	2b46      	cmp	r3, #70	; 0x46
 800079a:	d11d      	bne.n	80007d8 <main+0x150>
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <main+0x180>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3305      	adds	r3, #5
 80007a2:	4a1a      	ldr	r2, [pc, #104]	; (800080c <main+0x184>)
 80007a4:	5cd3      	ldrb	r3, [r2, r3]
 80007a6:	2b46      	cmp	r3, #70	; 0x46
 80007a8:	d116      	bne.n	80007d8 <main+0x150>
	  		//HAL_Delay(1000);
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4818      	ldr	r0, [pc, #96]	; (8000810 <main+0x188>)
 80007b0:	f000 fec8 	bl	8001544 <HAL_GPIO_WritePin>
	  		for(j=0;j<60;j++){str1[j]=0;}
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <main+0x180>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	e009      	b.n	80007d0 <main+0x148>
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <main+0x180>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <main+0x184>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	54d1      	strb	r1, [r2, r3]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <main+0x180>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <main+0x180>)
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <main+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b3b      	cmp	r3, #59	; 0x3b
 80007d6:	ddf1      	ble.n	80007bc <main+0x134>
	  	for(j=0;j<60;j++){
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <main+0x180>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <main+0x180>)
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <main+0x180>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b3b      	cmp	r3, #59	; 0x3b
 80007e8:	ddb6      	ble.n	8000758 <main+0xd0>

	  		}}
	  	flag=0;
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <main+0x178>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	  if(flag==1)
 80007f0:	e75e      	b.n	80006b0 <main+0x28>
 80007f2:	bf00      	nop
 80007f4:	20000124 	.word	0x20000124
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	20000118 	.word	0x20000118
 8000804:	20000120 	.word	0x20000120
 8000808:	2000011c 	.word	0x2000011c
 800080c:	20000128 	.word	0x20000128
 8000810:	40020000 	.word	0x40020000

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2234      	movs	r2, #52	; 0x34
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f9b4 	bl	8003b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <SystemClock_Config+0xd4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <SystemClock_Config+0xd4>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <SystemClock_Config+0xd4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <SystemClock_Config+0xd8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <SystemClock_Config+0xd8>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <SystemClock_Config+0xd8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000888:	2310      	movs	r3, #16
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800088c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000890:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000892:	2304      	movs	r3, #4
 8000894:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f9b2 	bl	8001c0c <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ae:	f000 f905 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2102      	movs	r1, #2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fe52 	bl	8001578 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008da:	f000 f8ef 	bl	8000abc <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	; 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM3_Init+0x94>)
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <MX_TIM3_Init+0x98>)
 8000910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_TIM3_Init+0x94>)
 8000914:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_TIM3_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_TIM3_Init+0x94>)
 8000922:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_TIM3_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_TIM3_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_TIM3_Init+0x94>)
 8000936:	f001 fc07 	bl	8002148 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000940:	f000 f8bc 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_TIM3_Init+0x94>)
 8000952:	f001 fdc1 	bl	80024d8 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800095c:	f000 f8ae 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000960:	2320      	movs	r3, #32
 8000962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_TIM3_Init+0x94>)
 800096e:	f001 ffdd 	bl	800292c <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f8a0 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000008c 	.word	0x2000008c
 8000988:	40000400 	.word	0x40000400

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_USART3_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000998:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f002 f842 	bl	8002a4c <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f875 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000d4 	.word	0x200000d4
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a25      	ldr	r2, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a6c:	f000 fd6a 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a88:	f000 fbc8 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000aa4:	f000 fbba 	bl	800121c <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020800 	.word	0x40020800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b06:	2007      	movs	r0, #7
 8000b08:	f000 fab4 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d115      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201d      	movs	r0, #29
 8000b4c:	f000 fa9d 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b50:	201d      	movs	r0, #29
 8000b52:	f000 fab6 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40000400 	.word	0x40000400
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2c      	ldr	r2, [pc, #176]	; (8000c38 <HAL_UART_MspInit+0xd0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d152      	bne.n	8000c30 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_UART_MspInit+0xd4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bde:	2320      	movs	r3, #32
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0xd8>)
 8000bfa:	f000 fb0f 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c10:	2307      	movs	r3, #7
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <HAL_UART_MspInit+0xdc>)
 8000c1c:	f000 fafe 	bl	800121c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2027      	movs	r0, #39	; 0x27
 8000c26:	f000 fa30 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c2a:	2027      	movs	r0, #39	; 0x27
 8000c2c:	f000 fa49 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40004800 	.word	0x40004800
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020400 	.word	0x40020400

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8da 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM3_IRQHandler+0x10>)
 8000ca2:	f001 fb11 	bl	80022c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000008c 	.word	0x2000008c

08000cb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <USART3_IRQHandler+0x10>)
 8000cb6:	f001 ffd9 	bl	8002c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000d4 	.word	0x200000d4

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f002 ff22 	bl	8003b3c <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200001d0 	.word	0x200001d0
 8000d2c:	200001e8 	.word	0x200001e8

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f002 fee1 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc7f 	bl	8000688 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d98:	08004504 	.word	0x08004504
  ldr r2, =_sbss
 8000d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da0:	200001e8 	.word	0x200001e8

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f94f 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fe74 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f967 	bl	80010de <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f92f 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	200001d4 	.word	0x200001d4

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200001d4 	.word	0x200001d4

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff feb6 	bl	8000e74 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d008      	beq.n	8001128 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e052      	b.n	80011ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0216 	bic.w	r2, r2, #22
 8001136:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001146:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <HAL_DMA_Abort+0x62>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0208 	bic.w	r2, r2, #8
 8001166:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001178:	e013      	b.n	80011a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800117a:	f7ff fe7b 	bl	8000e74 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b05      	cmp	r3, #5
 8001186:	d90c      	bls.n	80011a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2220      	movs	r2, #32
 800118c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e015      	b.n	80011ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e4      	bne.n	800117a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	223f      	movs	r2, #63	; 0x3f
 80011b6:	409a      	lsls	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d004      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e00c      	b.n	800120e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2205      	movs	r2, #5
 80011f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	e165      	b.n	8001504 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001238:	2201      	movs	r2, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	429a      	cmp	r2, r3
 8001252:	f040 8154 	bne.w	80014fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d005      	beq.n	800126e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126a:	2b02      	cmp	r3, #2
 800126c:	d130      	bne.n	80012d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 0201 	and.w	r2, r3, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d017      	beq.n	800130c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d123      	bne.n	8001360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	08da      	lsrs	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3208      	adds	r2, #8
 8001320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3208      	adds	r2, #8
 800135a:	69b9      	ldr	r1, [r7, #24]
 800135c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0203 	and.w	r2, r3, #3
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80ae 	beq.w	80014fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b5d      	ldr	r3, [pc, #372]	; (800151c <HAL_GPIO_Init+0x300>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a5c      	ldr	r2, [pc, #368]	; (800151c <HAL_GPIO_Init+0x300>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b5a      	ldr	r3, [pc, #360]	; (800151c <HAL_GPIO_Init+0x300>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013be:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_GPIO_Init+0x304>)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4f      	ldr	r2, [pc, #316]	; (8001524 <HAL_GPIO_Init+0x308>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d025      	beq.n	8001436 <HAL_GPIO_Init+0x21a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4e      	ldr	r2, [pc, #312]	; (8001528 <HAL_GPIO_Init+0x30c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d01f      	beq.n	8001432 <HAL_GPIO_Init+0x216>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <HAL_GPIO_Init+0x310>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d019      	beq.n	800142e <HAL_GPIO_Init+0x212>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_GPIO_Init+0x314>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0x20e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <HAL_GPIO_Init+0x318>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00d      	beq.n	8001426 <HAL_GPIO_Init+0x20a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_GPIO_Init+0x31c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x206>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x320>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_GPIO_Init+0x202>
 800141a:	2306      	movs	r3, #6
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x21c>
 800141e:	2307      	movs	r3, #7
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x21c>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x21c>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x21c>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x21c>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x21c>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x21c>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x304>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_GPIO_Init+0x324>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a31      	ldr	r2, [pc, #196]	; (8001540 <HAL_GPIO_Init+0x324>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_GPIO_Init+0x324>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_GPIO_Init+0x324>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_GPIO_Init+0x324>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <HAL_GPIO_Init+0x324>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_GPIO_Init+0x324>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_GPIO_Init+0x324>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae96 	bls.w	8001238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0cc      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e067      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fc04 	bl	8000e74 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fc00 	bl	8000e74 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f855 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb64 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	080044a8 	.word	0x080044a8
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_GetHCLKFreq+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000000 	.word	0x20000000

0800175c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001760:	f7ff fff0 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	0a9b      	lsrs	r3, r3, #10
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	4903      	ldr	r1, [pc, #12]	; (8001780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	080044b8 	.word	0x080044b8

08001784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001788:	f7ff ffdc 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	0b5b      	lsrs	r3, r3, #13
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	080044b8 	.word	0x080044b8

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b0ae      	sub	sp, #184	; 0xb8
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d2:	4bcb      	ldr	r3, [pc, #812]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	f200 8206 	bhi.w	8001bec <HAL_RCC_GetSysClockFreq+0x440>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	08001bed 	.word	0x08001bed
 80017f0:	08001bed 	.word	0x08001bed
 80017f4:	08001bed 	.word	0x08001bed
 80017f8:	08001825 	.word	0x08001825
 80017fc:	08001bed 	.word	0x08001bed
 8001800:	08001bed 	.word	0x08001bed
 8001804:	08001bed 	.word	0x08001bed
 8001808:	0800182d 	.word	0x0800182d
 800180c:	08001bed 	.word	0x08001bed
 8001810:	08001bed 	.word	0x08001bed
 8001814:	08001bed 	.word	0x08001bed
 8001818:	08001a1d 	.word	0x08001a1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4bb9      	ldr	r3, [pc, #740]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x358>)
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001822:	e1e7      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001824:	4bb8      	ldr	r3, [pc, #736]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182a:	e1e3      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001838:	4bb1      	ldr	r3, [pc, #708]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d071      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001850:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800186a:	4622      	mov	r2, r4
 800186c:	462b      	mov	r3, r5
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4621      	mov	r1, r4
 8001884:	1a51      	subs	r1, r2, r1
 8001886:	6439      	str	r1, [r7, #64]	; 0x40
 8001888:	4629      	mov	r1, r5
 800188a:	eb63 0301 	sbc.w	r3, r3, r1
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800189c:	4649      	mov	r1, r9
 800189e:	018b      	lsls	r3, r1, #6
 80018a0:	4641      	mov	r1, r8
 80018a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a6:	4641      	mov	r1, r8
 80018a8:	018a      	lsls	r2, r1, #6
 80018aa:	4641      	mov	r1, r8
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80018b0:	4649      	mov	r1, r9
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018c4:	4649      	mov	r1, r9
 80018c6:	00cb      	lsls	r3, r1, #3
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018ce:	4641      	mov	r1, r8
 80018d0:	00ca      	lsls	r2, r1, #3
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	4622      	mov	r2, r4
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	462b      	mov	r3, r5
 80018e0:	460a      	mov	r2, r1
 80018e2:	eb42 0303 	adc.w	r3, r2, r3
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018f4:	4629      	mov	r1, r5
 80018f6:	024b      	lsls	r3, r1, #9
 80018f8:	4621      	mov	r1, r4
 80018fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018fe:	4621      	mov	r1, r4
 8001900:	024a      	lsls	r2, r1, #9
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800190a:	2200      	movs	r2, #0
 800190c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001918:	f7fe fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001926:	e067      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	2200      	movs	r2, #0
 8001930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001934:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800193c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001940:	67bb      	str	r3, [r7, #120]	; 0x78
 8001942:	2300      	movs	r3, #0
 8001944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001946:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800194a:	4622      	mov	r2, r4
 800194c:	462b      	mov	r3, r5
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4621      	mov	r1, r4
 8001964:	1a51      	subs	r1, r2, r1
 8001966:	62b9      	str	r1, [r7, #40]	; 0x28
 8001968:	4629      	mov	r1, r5
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800197c:	4649      	mov	r1, r9
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4641      	mov	r1, r8
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4641      	mov	r1, r8
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4641      	mov	r1, r8
 800198c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001990:	4649      	mov	r1, r9
 8001992:	eb63 0b01 	sbc.w	fp, r3, r1
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019aa:	4692      	mov	sl, r2
 80019ac:	469b      	mov	fp, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	eb1a 0303 	adds.w	r3, sl, r3
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	462b      	mov	r3, r5
 80019b8:	eb4b 0303 	adc.w	r3, fp, r3
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019ca:	4629      	mov	r1, r5
 80019cc:	028b      	lsls	r3, r1, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d4:	4621      	mov	r1, r4
 80019d6:	028a      	lsls	r2, r1, #10
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e0:	2200      	movs	r2, #0
 80019e2:	673b      	str	r3, [r7, #112]	; 0x70
 80019e4:	677a      	str	r2, [r7, #116]	; 0x74
 80019e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019ea:	f7fe fc69 	bl	80002c0 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4613      	mov	r3, r2
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1a:	e0eb      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d06b      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a46:	663b      	str	r3, [r7, #96]	; 0x60
 8001a48:	2300      	movs	r3, #0
 8001a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a50:	4622      	mov	r2, r4
 8001a52:	462b      	mov	r3, r5
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	0159      	lsls	r1, r3, #5
 8001a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a62:	0150      	lsls	r0, r2, #5
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1a51      	subs	r1, r2, r1
 8001a6c:	61b9      	str	r1, [r7, #24]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	eb63 0301 	sbc.w	r3, r3, r1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a82:	4659      	mov	r1, fp
 8001a84:	018b      	lsls	r3, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8c:	4651      	mov	r1, sl
 8001a8e:	018a      	lsls	r2, r1, #6
 8001a90:	4651      	mov	r1, sl
 8001a92:	ebb2 0801 	subs.w	r8, r2, r1
 8001a96:	4659      	mov	r1, fp
 8001a98:	eb63 0901 	sbc.w	r9, r3, r1
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	eb18 0303 	adds.w	r3, r8, r3
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	462b      	mov	r3, r5
 8001abe:	eb49 0303 	adc.w	r3, r9, r3
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	024b      	lsls	r3, r1, #9
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ada:	4621      	mov	r1, r4
 8001adc:	024a      	lsls	r2, r1, #9
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af0:	f7fe fbe6 	bl	80002c0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001afe:	e065      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x420>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	4611      	mov	r1, r2
 8001b18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b1e:	2300      	movs	r3, #0
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
 8001b22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b26:	4642      	mov	r2, r8
 8001b28:	464b      	mov	r3, r9
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4641      	mov	r1, r8
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	4649      	mov	r1, r9
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b58:	4659      	mov	r1, fp
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	4651      	mov	r1, sl
 8001b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b62:	4651      	mov	r1, sl
 8001b64:	018a      	lsls	r2, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	1a54      	subs	r4, r2, r1
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	00eb      	lsls	r3, r5, #3
 8001b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7e:	00e2      	lsls	r2, r4, #3
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	18e3      	adds	r3, r4, r3
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bbe:	f7fe fb7f 	bl	80002c0 <__aeabi_uldivmod>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0f1b      	lsrs	r3, r3, #28
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bea:	e003      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	37b8      	adds	r7, #184	; 0xb8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	00f42400 	.word	0x00f42400

08001c0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e28d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8083 	beq.w	8001d32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c2c:	4b94      	ldr	r3, [pc, #592]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d019      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c38:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c44:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x124>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e25a      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x90>
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xb4>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f8c8 	bl	8000e74 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f8c4 	bl	8000e74 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e21f      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xdc>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f8b4 	bl	8000e74 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f8b0 	bl	8000e74 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e20b      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x104>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06f      	beq.n	8001e1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d3e:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d017      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1d3      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4937      	ldr	r1, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff f85d 	bl	8000e74 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f859 	bl	8000e74 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1b4      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4925      	ldr	r1, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f83c 	bl	8000e74 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff f838 	bl	8000e74 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e193      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d036      	beq.n	8001e98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff f81c 	bl	8000e74 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff f818 	bl	8000e74 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e173      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x234>
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff f805 	bl	8000e74 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f801 	bl	8000e74 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d907      	bls.n	8001e8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e15c      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ea      	bne.n	8001e6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8097 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b7f      	ldr	r3, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a7e      	ldr	r2, [pc, #504]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7fe ffc1 	bl	8000e74 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7fe ffbd 	bl	8000e74 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e118      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x31e>
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x340>
 8001f32:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a59      	ldr	r2, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7fe ff82 	bl	8000e74 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe ff7e 	bl	8000e74 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0d7      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ee      	beq.n	8001f74 <HAL_RCC_OscConfig+0x368>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe ff6c 	bl	8000e74 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe ff68 	bl	8000e74 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0c1      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ad 	beq.w	8002138 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d060      	beq.n	80020ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d145      	bne.n	800207e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ff3c 	bl	8000e74 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe ff38 	bl	8000e74 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e093      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	071b      	lsls	r3, r3, #28
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe ff0d 	bl	8000e74 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe ff09 	bl	8000e74 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e064      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x452>
 800207c:	e05c      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fef6 	bl	8000e74 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fef2 	bl	8000e74 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x480>
 80020aa:	e045      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e040      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x538>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d030      	beq.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d129      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d122      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d119      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d10f      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e041      	b.n	80021de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fcd2 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f000 fa96 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d001      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e04e      	b.n	800229e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_TIM_Base_Start_IT+0xc4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d022      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x80>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d01d      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x80>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d018      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x80>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x80>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x80>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x80>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x80>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d111      	bne.n	800228c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b06      	cmp	r3, #6
 8002278:	d010      	beq.n	800229c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228a:	e007      	b.n	800229c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40000c00 	.word	0x40000c00
 80022bc:	40010400 	.word	0x40010400
 80022c0:	40014000 	.word	0x40014000
 80022c4:	40001800 	.word	0x40001800

080022c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0202 	mvn.w	r2, #2
 80022f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9b5 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9a7 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f9b8 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0204 	mvn.w	r2, #4
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f98b 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f97d 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f98e 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b08      	cmp	r3, #8
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b08      	cmp	r3, #8
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0208 	mvn.w	r2, #8
 800239c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2204      	movs	r2, #4
 80023a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f961 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f953 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f964 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0210 	mvn.w	r2, #16
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2208      	movs	r2, #8
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f937 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f929 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f93a 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0201 	mvn.w	r2, #1
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe f8ea 	bl	8000620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b80      	cmp	r3, #128	; 0x80
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b80      	cmp	r3, #128	; 0x80
 8002466:	d107      	bne.n	8002478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fae0 	bl	8002a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8ff 	bl	80026a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0220 	mvn.w	r2, #32
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 faaa 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_TIM_ConfigClockSource+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0b4      	b.n	800265e <HAL_TIM_ConfigClockSource+0x186>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252c:	d03e      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0xd4>
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002532:	f200 8087 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	f000 8086 	beq.w	800264a <HAL_TIM_ConfigClockSource+0x172>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	d87f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b70      	cmp	r3, #112	; 0x70
 8002546:	d01a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0xa6>
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d87b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d050      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002550:	2b60      	cmp	r3, #96	; 0x60
 8002552:	d877      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b50      	cmp	r3, #80	; 0x50
 8002556:	d03c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002558:	2b50      	cmp	r3, #80	; 0x50
 800255a:	d873      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d058      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x13a>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d86f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b30      	cmp	r3, #48	; 0x30
 8002566:	d064      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002568:	2b30      	cmp	r3, #48	; 0x30
 800256a:	d86b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b20      	cmp	r3, #32
 800256e:	d060      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	2b20      	cmp	r3, #32
 8002572:	d867      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05c      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	2b10      	cmp	r3, #16
 800257a:	d05a      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x15a>
 800257c:	e062      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f000 f9ad 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	609a      	str	r2, [r3, #8]
      break;
 80025aa:	e04f      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f000 f996 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ce:	609a      	str	r2, [r3, #8]
      break;
 80025d0:	e03c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f90a 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2150      	movs	r1, #80	; 0x50
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f963 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80025f0:	e02c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f929 	bl	8002856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2160      	movs	r1, #96	; 0x60
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f953 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002610:	e01c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f8ea 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f943 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002630:	e00c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f000 f93a 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002642:	e003      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e000      	b.n	800264c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800264a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a40      	ldr	r2, [pc, #256]	; (80027cc <TIM_Base_SetConfig+0x114>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d00f      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <TIM_Base_SetConfig+0x118>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <TIM_Base_SetConfig+0x11c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <TIM_Base_SetConfig+0x120>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <TIM_Base_SetConfig+0x124>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <TIM_Base_SetConfig+0x114>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d027      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <TIM_Base_SetConfig+0x118>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d023      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <TIM_Base_SetConfig+0x11c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <TIM_Base_SetConfig+0x120>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <TIM_Base_SetConfig+0x124>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d017      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <TIM_Base_SetConfig+0x128>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <TIM_Base_SetConfig+0x12c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00f      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <TIM_Base_SetConfig+0x130>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <TIM_Base_SetConfig+0x134>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <TIM_Base_SetConfig+0x138>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <TIM_Base_SetConfig+0x13c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <TIM_Base_SetConfig+0x114>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d003      	beq.n	80027b0 <TIM_Base_SetConfig+0xf8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <TIM_Base_SetConfig+0x124>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d103      	bne.n	80027b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	615a      	str	r2, [r3, #20]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40000c00 	.word	0x40000c00
 80027dc:	40010400 	.word	0x40010400
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800
 80027ec:	40001800 	.word	0x40001800
 80027f0:	40001c00 	.word	0x40001c00
 80027f4:	40002000 	.word	0x40002000

080027f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0201 	bic.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f023 030a 	bic.w	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002856:	b480      	push	{r7}
 8002858:	b087      	sub	sp, #28
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	031b      	lsls	r3, r3, #12
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f043 0307 	orr.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	431a      	orrs	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002940:	2302      	movs	r3, #2
 8002942:	e05a      	b.n	80029fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d01d      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10c      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40010400 	.word	0x40010400
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40001800 	.word	0x40001800

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e03f      	b.n	8002ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe f878 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fddf 	bl	8003654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08a      	sub	sp, #40	; 0x28
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d17c      	bne.n	8002c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_UART_Transmit+0x2c>
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e075      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Transmit+0x3e>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e06e      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2221      	movs	r2, #33	; 0x21
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe f99b 	bl	8000e74 <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88fa      	ldrh	r2, [r7, #6]
 8002b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d108      	bne.n	8002b68 <HAL_UART_Transmit+0x82>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e003      	b.n	8002b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b78:	e02a      	b.n	8002bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fb1f 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e036      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	3302      	adds	r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	e007      	b.n	8002bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1cf      	bne.n	8002b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 faef 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e006      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d11d      	bne.n	8002c60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_UART_Receive_IT+0x26>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e016      	b.n	8002c62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Receive_IT+0x38>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e00f      	b.n	8002c62 <HAL_UART_Receive_IT+0x58>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fb24 	bl	80032a4 <UART_Start_Receive_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e000      	b.n	8002c62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0ba      	sub	sp, #232	; 0xe8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x66>
 8002cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fc07 	bl	80034de <UART_Receive_IT>
      return;
 8002cd0:	e256      	b.n	8003180 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80de 	beq.w	8002e98 <HAL_UART_IRQHandler+0x22c>
 8002cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80d1 	beq.w	8002e98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_UART_IRQHandler+0xae>
 8002d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_UART_IRQHandler+0xd2>
 8002d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f043 0202 	orr.w	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_UART_IRQHandler+0xf6>
 8002d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0204 	orr.w	r2, r3, #4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d011      	beq.n	8002d92 <HAL_UART_IRQHandler+0x126>
 8002d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f043 0208 	orr.w	r2, r3, #8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 81ed 	beq.w	8003176 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_UART_IRQHandler+0x14e>
 8002da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fb92 	bl	80034de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <HAL_UART_IRQHandler+0x17a>
 8002dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d04f      	beq.n	8002e86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa9a 	bl	8003320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d141      	bne.n	8002e7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3314      	adds	r3, #20
 8002e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1d9      	bne.n	8002dfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d013      	beq.n	8002e76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4a7d      	ldr	r2, [pc, #500]	; (8003048 <HAL_UART_IRQHandler+0x3dc>)
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f9bb 	bl	80011d6 <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e70:	4610      	mov	r0, r2
 8002e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00e      	b.n	8002e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f990 	bl	800319c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e00a      	b.n	8002e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f98c 	bl	800319c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	e006      	b.n	8002e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f988 	bl	800319c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e92:	e170      	b.n	8003176 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	bf00      	nop
    return;
 8002e96:	e16e      	b.n	8003176 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f040 814a 	bne.w	8003136 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8143 	beq.w	8003136 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 813c 	beq.w	8003136 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	f040 80b4 	bne.w	800304c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8140 	beq.w	800317a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f080 8139 	bcs.w	800317a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1a:	f000 8088 	beq.w	800302e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1d9      	bne.n	8002f1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e1      	bne.n	8002f6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3314      	adds	r3, #20
 8002fac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e3      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffe:	f023 0310 	bic.w	r3, r3, #16
 8003002:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003010:	65ba      	str	r2, [r7, #88]	; 0x58
 8003012:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003016:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800301e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e3      	bne.n	8002fec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe f864 	bl	80010f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003036:	b29b      	uxth	r3, r3
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	b29b      	uxth	r3, r3
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f8b6 	bl	80031b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003044:	e099      	b.n	800317a <HAL_UART_IRQHandler+0x50e>
 8003046:	bf00      	nop
 8003048:	080033e7 	.word	0x080033e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003054:	b29b      	uxth	r3, r3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 808b 	beq.w	800317e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8086 	beq.w	800317e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003096:	647a      	str	r2, [r7, #68]	; 0x44
 8003098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800309c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e3      	bne.n	8003072 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	623b      	str	r3, [r7, #32]
   return(result);
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030ce:	633a      	str	r2, [r7, #48]	; 0x30
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e3      	bne.n	80030aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0310 	bic.w	r3, r3, #16
 8003106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003114:	61fa      	str	r2, [r7, #28]
 8003116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	69b9      	ldr	r1, [r7, #24]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	617b      	str	r3, [r7, #20]
   return(result);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e3      	bne.n	80030f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f83e 	bl	80031b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003134:	e023      	b.n	800317e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_UART_IRQHandler+0x4ea>
 8003142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f95d 	bl	800340e <UART_Transmit_IT>
    return;
 8003154:	e014      	b.n	8003180 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <HAL_UART_IRQHandler+0x514>
 8003162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f99d 	bl	80034ae <UART_EndTransmit_IT>
    return;
 8003174:	e004      	b.n	8003180 <HAL_UART_IRQHandler+0x514>
    return;
 8003176:	bf00      	nop
 8003178:	e002      	b.n	8003180 <HAL_UART_IRQHandler+0x514>
      return;
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <HAL_UART_IRQHandler+0x514>
      return;
 800317e:	bf00      	nop
  }
}
 8003180:	37e8      	adds	r7, #232	; 0xe8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop

08003188 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b090      	sub	sp, #64	; 0x40
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d8:	e050      	b.n	800327c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d04c      	beq.n	800327c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031e8:	f7fd fe44 	bl	8000e74 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d241      	bcs.n	800327c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330c      	adds	r3, #12
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003218:	637a      	str	r2, [r7, #52]	; 0x34
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800321e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e5      	bne.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3314      	adds	r3, #20
 8003232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	613b      	str	r3, [r7, #16]
   return(result);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3314      	adds	r3, #20
 800324a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800324c:	623a      	str	r2, [r7, #32]
 800324e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	69f9      	ldr	r1, [r7, #28]
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	61bb      	str	r3, [r7, #24]
   return(result);
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e5      	bne.n	800322c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e00f      	b.n	800329c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	429a      	cmp	r2, r3
 8003298:	d09f      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3740      	adds	r7, #64	; 0x40
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2222      	movs	r2, #34	; 0x22
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0220 	orr.w	r2, r2, #32
 8003310:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b095      	sub	sp, #84	; 0x54
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800333e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003348:	643a      	str	r2, [r7, #64]	; 0x40
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800334e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	61fb      	str	r3, [r7, #28]
   return(result);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3314      	adds	r3, #20
 800337a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2b01      	cmp	r3, #1
 8003396:	d119      	bne.n	80033cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0310 	bic.w	r3, r3, #16
 80033ae:	647b      	str	r3, [r7, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033b8:	61ba      	str	r2, [r7, #24]
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033da:	bf00      	nop
 80033dc:	3754      	adds	r7, #84	; 0x54
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff fecb 	bl	800319c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b21      	cmp	r3, #33	; 0x21
 8003420:	d13e      	bne.n	80034a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342a:	d114      	bne.n	8003456 <UART_Transmit_IT+0x48>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d110      	bne.n	8003456 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003448:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	1c9a      	adds	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]
 8003454:	e008      	b.n	8003468 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6211      	str	r1, [r2, #32]
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fe5a 	bl	8003188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b08c      	sub	sp, #48	; 0x30
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b22      	cmp	r3, #34	; 0x22
 80034f0:	f040 80ab 	bne.w	800364a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d117      	bne.n	800352e <UART_Receive_IT+0x50>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351c:	b29a      	uxth	r2, r3
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
 800352c:	e026      	b.n	800357c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d007      	beq.n	8003552 <UART_Receive_IT+0x74>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <UART_Receive_IT+0x82>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e008      	b.n	8003572 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4619      	mov	r1, r3
 800358a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800358c:	2b00      	cmp	r3, #0
 800358e:	d15a      	bne.n	8003646 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0220 	bic.w	r2, r2, #32
 800359e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d135      	bne.n	800363c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	613b      	str	r3, [r7, #16]
   return(result);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f023 0310 	bic.w	r3, r3, #16
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	623a      	str	r2, [r7, #32]
 80035f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	61bb      	str	r3, [r7, #24]
   return(result);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d10a      	bne.n	800362e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fdbb 	bl	80031b0 <HAL_UARTEx_RxEventCallback>
 800363a:	e002      	b.n	8003642 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fc ffc1 	bl	80005c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e002      	b.n	800364c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800364a:	2302      	movs	r3, #2
  }
}
 800364c:	4618      	mov	r0, r3
 800364e:	3730      	adds	r7, #48	; 0x30
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003658:	b0c0      	sub	sp, #256	; 0x100
 800365a:	af00      	add	r7, sp, #0
 800365c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	ea40 0301 	orr.w	r3, r0, r1
 800367c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	431a      	orrs	r2, r3
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	431a      	orrs	r2, r3
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036ac:	f021 010c 	bic.w	r1, r1, #12
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ba:	430b      	orrs	r3, r1
 80036bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	6999      	ldr	r1, [r3, #24]
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	ea40 0301 	orr.w	r3, r0, r1
 80036da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <UART_SetConfig+0x2cc>)
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d005      	beq.n	80036f4 <UART_SetConfig+0xa0>
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b8d      	ldr	r3, [pc, #564]	; (8003924 <UART_SetConfig+0x2d0>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d104      	bne.n	80036fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7fe f846 	bl	8001784 <HAL_RCC_GetPCLK2Freq>
 80036f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036fc:	e003      	b.n	8003706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036fe:	f7fe f82d 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8003702:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003710:	f040 810c 	bne.w	800392c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800371e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003726:	4622      	mov	r2, r4
 8003728:	462b      	mov	r3, r5
 800372a:	1891      	adds	r1, r2, r2
 800372c:	65b9      	str	r1, [r7, #88]	; 0x58
 800372e:	415b      	adcs	r3, r3
 8003730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003736:	4621      	mov	r1, r4
 8003738:	eb12 0801 	adds.w	r8, r2, r1
 800373c:	4629      	mov	r1, r5
 800373e:	eb43 0901 	adc.w	r9, r3, r1
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
 800375a:	4623      	mov	r3, r4
 800375c:	eb18 0303 	adds.w	r3, r8, r3
 8003760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003764:	462b      	mov	r3, r5
 8003766:	eb49 0303 	adc.w	r3, r9, r3
 800376a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800377a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800377e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003782:	460b      	mov	r3, r1
 8003784:	18db      	adds	r3, r3, r3
 8003786:	653b      	str	r3, [r7, #80]	; 0x50
 8003788:	4613      	mov	r3, r2
 800378a:	eb42 0303 	adc.w	r3, r2, r3
 800378e:	657b      	str	r3, [r7, #84]	; 0x54
 8003790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003798:	f7fc fd92 	bl	80002c0 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4b61      	ldr	r3, [pc, #388]	; (8003928 <UART_SetConfig+0x2d4>)
 80037a2:	fba3 2302 	umull	r2, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	011c      	lsls	r4, r3, #4
 80037aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	1891      	adds	r1, r2, r2
 80037c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80037c4:	415b      	adcs	r3, r3
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037cc:	4641      	mov	r1, r8
 80037ce:	eb12 0a01 	adds.w	sl, r2, r1
 80037d2:	4649      	mov	r1, r9
 80037d4:	eb43 0b01 	adc.w	fp, r3, r1
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ec:	4692      	mov	sl, r2
 80037ee:	469b      	mov	fp, r3
 80037f0:	4643      	mov	r3, r8
 80037f2:	eb1a 0303 	adds.w	r3, sl, r3
 80037f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037fa:	464b      	mov	r3, r9
 80037fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003810:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003818:	460b      	mov	r3, r1
 800381a:	18db      	adds	r3, r3, r3
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
 800381e:	4613      	mov	r3, r2
 8003820:	eb42 0303 	adc.w	r3, r2, r3
 8003824:	647b      	str	r3, [r7, #68]	; 0x44
 8003826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800382a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800382e:	f7fc fd47 	bl	80002c0 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4611      	mov	r1, r2
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <UART_SetConfig+0x2d4>)
 800383a:	fba3 2301 	umull	r2, r3, r3, r1
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2264      	movs	r2, #100	; 0x64
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	1acb      	subs	r3, r1, r3
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <UART_SetConfig+0x2d4>)
 8003850:	fba3 2302 	umull	r2, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800385c:	441c      	add	r4, r3
 800385e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003862:	2200      	movs	r2, #0
 8003864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003868:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800386c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	1891      	adds	r1, r2, r2
 8003876:	63b9      	str	r1, [r7, #56]	; 0x38
 8003878:	415b      	adcs	r3, r3
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003880:	4641      	mov	r1, r8
 8003882:	1851      	adds	r1, r2, r1
 8003884:	6339      	str	r1, [r7, #48]	; 0x30
 8003886:	4649      	mov	r1, r9
 8003888:	414b      	adcs	r3, r1
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003898:	4659      	mov	r1, fp
 800389a:	00cb      	lsls	r3, r1, #3
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a2:	4651      	mov	r1, sl
 80038a4:	00ca      	lsls	r2, r1, #3
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	4642      	mov	r2, r8
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b4:	464b      	mov	r3, r9
 80038b6:	460a      	mov	r2, r1
 80038b8:	eb42 0303 	adc.w	r3, r2, r3
 80038bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038d4:	460b      	mov	r3, r1
 80038d6:	18db      	adds	r3, r3, r3
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	4613      	mov	r3, r2
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038ea:	f7fc fce9 	bl	80002c0 <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <UART_SetConfig+0x2d4>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <UART_SetConfig+0x2d4>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 0207 	and.w	r2, r3, #7
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4422      	add	r2, r4
 800391a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800391c:	e105      	b.n	8003b2a <UART_SetConfig+0x4d6>
 800391e:	bf00      	nop
 8003920:	40011000 	.word	0x40011000
 8003924:	40011400 	.word	0x40011400
 8003928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800392c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800393a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800393e:	4642      	mov	r2, r8
 8003940:	464b      	mov	r3, r9
 8003942:	1891      	adds	r1, r2, r2
 8003944:	6239      	str	r1, [r7, #32]
 8003946:	415b      	adcs	r3, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394e:	4641      	mov	r1, r8
 8003950:	1854      	adds	r4, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb43 0501 	adc.w	r5, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	00eb      	lsls	r3, r5, #3
 8003962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003966:	00e2      	lsls	r2, r4, #3
 8003968:	4614      	mov	r4, r2
 800396a:	461d      	mov	r5, r3
 800396c:	4643      	mov	r3, r8
 800396e:	18e3      	adds	r3, r4, r3
 8003970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003974:	464b      	mov	r3, r9
 8003976:	eb45 0303 	adc.w	r3, r5, r3
 800397a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800398a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800399a:	4629      	mov	r1, r5
 800399c:	008b      	lsls	r3, r1, #2
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a4:	4621      	mov	r1, r4
 80039a6:	008a      	lsls	r2, r1, #2
 80039a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039ac:	f7fc fc88 	bl	80002c0 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b60      	ldr	r3, [pc, #384]	; (8003b38 <UART_SetConfig+0x4e4>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	011c      	lsls	r4, r3, #4
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	61b9      	str	r1, [r7, #24]
 80039d8:	415b      	adcs	r3, r3
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e0:	4641      	mov	r1, r8
 80039e2:	1851      	adds	r1, r2, r1
 80039e4:	6139      	str	r1, [r7, #16]
 80039e6:	4649      	mov	r1, r9
 80039e8:	414b      	adcs	r3, r1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f8:	4659      	mov	r1, fp
 80039fa:	00cb      	lsls	r3, r1, #3
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a02:	4651      	mov	r1, sl
 8003a04:	00ca      	lsls	r2, r1, #3
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a14:	464b      	mov	r3, r9
 8003a16:	460a      	mov	r2, r1
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a38:	4649      	mov	r1, r9
 8003a3a:	008b      	lsls	r3, r1, #2
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a42:	4641      	mov	r1, r8
 8003a44:	008a      	lsls	r2, r1, #2
 8003a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a4a:	f7fc fc39 	bl	80002c0 <__aeabi_uldivmod>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003a54:	fba3 1302 	umull	r1, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	3332      	adds	r3, #50	; 0x32
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a72:	441c      	add	r4, r3
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a7c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a82:	4642      	mov	r2, r8
 8003a84:	464b      	mov	r3, r9
 8003a86:	1891      	adds	r1, r2, r2
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	415b      	adcs	r3, r3
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a92:	4641      	mov	r1, r8
 8003a94:	1851      	adds	r1, r2, r1
 8003a96:	6039      	str	r1, [r7, #0]
 8003a98:	4649      	mov	r1, r9
 8003a9a:	414b      	adcs	r3, r1
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aaa:	4659      	mov	r1, fp
 8003aac:	00cb      	lsls	r3, r1, #3
 8003aae:	4651      	mov	r1, sl
 8003ab0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	00ca      	lsls	r2, r1, #3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	4603      	mov	r3, r0
 8003abe:	4642      	mov	r2, r8
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	460a      	mov	r2, r1
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad8:	667a      	str	r2, [r7, #100]	; 0x64
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	008b      	lsls	r3, r1, #2
 8003aea:	4641      	mov	r1, r8
 8003aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af0:	4641      	mov	r1, r8
 8003af2:	008a      	lsls	r2, r1, #2
 8003af4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003af8:	f7fc fbe2 	bl	80002c0 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003b02:	fba3 1302 	umull	r1, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2164      	movs	r1, #100	; 0x64
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	; 0x32
 8003b14:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4422      	add	r2, r4
 8003b28:	609a      	str	r2, [r3, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b36:	bf00      	nop
 8003b38:	51eb851f 	.word	0x51eb851f

08003b3c <__errno>:
 8003b3c:	4b01      	ldr	r3, [pc, #4]	; (8003b44 <__errno+0x8>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	2000000c 	.word	0x2000000c

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4d0d      	ldr	r5, [pc, #52]	; (8003b80 <__libc_init_array+0x38>)
 8003b4c:	4c0d      	ldr	r4, [pc, #52]	; (8003b84 <__libc_init_array+0x3c>)
 8003b4e:	1b64      	subs	r4, r4, r5
 8003b50:	10a4      	asrs	r4, r4, #2
 8003b52:	2600      	movs	r6, #0
 8003b54:	42a6      	cmp	r6, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	4d0b      	ldr	r5, [pc, #44]	; (8003b88 <__libc_init_array+0x40>)
 8003b5a:	4c0c      	ldr	r4, [pc, #48]	; (8003b8c <__libc_init_array+0x44>)
 8003b5c:	f000 fc8e 	bl	800447c <_init>
 8003b60:	1b64      	subs	r4, r4, r5
 8003b62:	10a4      	asrs	r4, r4, #2
 8003b64:	2600      	movs	r6, #0
 8003b66:	42a6      	cmp	r6, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b70:	4798      	blx	r3
 8003b72:	3601      	adds	r6, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7a:	4798      	blx	r3
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	080044fc 	.word	0x080044fc
 8003b84:	080044fc 	.word	0x080044fc
 8003b88:	080044fc 	.word	0x080044fc
 8003b8c:	08004500 	.word	0x08004500

08003b90 <memset>:
 8003b90:	4402      	add	r2, r0
 8003b92:	4603      	mov	r3, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <siprintf>:
 8003ba0:	b40e      	push	{r1, r2, r3}
 8003ba2:	b500      	push	{lr}
 8003ba4:	b09c      	sub	sp, #112	; 0x70
 8003ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ba8:	9002      	str	r0, [sp, #8]
 8003baa:	9006      	str	r0, [sp, #24]
 8003bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bb0:	4809      	ldr	r0, [pc, #36]	; (8003bd8 <siprintf+0x38>)
 8003bb2:	9107      	str	r1, [sp, #28]
 8003bb4:	9104      	str	r1, [sp, #16]
 8003bb6:	4909      	ldr	r1, [pc, #36]	; (8003bdc <siprintf+0x3c>)
 8003bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bbc:	9105      	str	r1, [sp, #20]
 8003bbe:	6800      	ldr	r0, [r0, #0]
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	a902      	add	r1, sp, #8
 8003bc4:	f000 f868 	bl	8003c98 <_svfiprintf_r>
 8003bc8:	9b02      	ldr	r3, [sp, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	b01c      	add	sp, #112	; 0x70
 8003bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bd4:	b003      	add	sp, #12
 8003bd6:	4770      	bx	lr
 8003bd8:	2000000c 	.word	0x2000000c
 8003bdc:	ffff0208 	.word	0xffff0208

08003be0 <__ssputs_r>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	688e      	ldr	r6, [r1, #8]
 8003be6:	429e      	cmp	r6, r3
 8003be8:	4682      	mov	sl, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	4690      	mov	r8, r2
 8003bee:	461f      	mov	r7, r3
 8003bf0:	d838      	bhi.n	8003c64 <__ssputs_r+0x84>
 8003bf2:	898a      	ldrh	r2, [r1, #12]
 8003bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bf8:	d032      	beq.n	8003c60 <__ssputs_r+0x80>
 8003bfa:	6825      	ldr	r5, [r4, #0]
 8003bfc:	6909      	ldr	r1, [r1, #16]
 8003bfe:	eba5 0901 	sub.w	r9, r5, r1
 8003c02:	6965      	ldr	r5, [r4, #20]
 8003c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	444b      	add	r3, r9
 8003c10:	106d      	asrs	r5, r5, #1
 8003c12:	429d      	cmp	r5, r3
 8003c14:	bf38      	it	cc
 8003c16:	461d      	movcc	r5, r3
 8003c18:	0553      	lsls	r3, r2, #21
 8003c1a:	d531      	bpl.n	8003c80 <__ssputs_r+0xa0>
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f000 fb63 	bl	80042e8 <_malloc_r>
 8003c22:	4606      	mov	r6, r0
 8003c24:	b950      	cbnz	r0, 8003c3c <__ssputs_r+0x5c>
 8003c26:	230c      	movs	r3, #12
 8003c28:	f8ca 3000 	str.w	r3, [sl]
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c32:	81a3      	strh	r3, [r4, #12]
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3c:	6921      	ldr	r1, [r4, #16]
 8003c3e:	464a      	mov	r2, r9
 8003c40:	f000 fabe 	bl	80041c0 <memcpy>
 8003c44:	89a3      	ldrh	r3, [r4, #12]
 8003c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	6126      	str	r6, [r4, #16]
 8003c52:	6165      	str	r5, [r4, #20]
 8003c54:	444e      	add	r6, r9
 8003c56:	eba5 0509 	sub.w	r5, r5, r9
 8003c5a:	6026      	str	r6, [r4, #0]
 8003c5c:	60a5      	str	r5, [r4, #8]
 8003c5e:	463e      	mov	r6, r7
 8003c60:	42be      	cmp	r6, r7
 8003c62:	d900      	bls.n	8003c66 <__ssputs_r+0x86>
 8003c64:	463e      	mov	r6, r7
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	f000 fab6 	bl	80041dc <memmove>
 8003c70:	68a3      	ldr	r3, [r4, #8]
 8003c72:	1b9b      	subs	r3, r3, r6
 8003c74:	60a3      	str	r3, [r4, #8]
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	4433      	add	r3, r6
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e7db      	b.n	8003c38 <__ssputs_r+0x58>
 8003c80:	462a      	mov	r2, r5
 8003c82:	f000 fba5 	bl	80043d0 <_realloc_r>
 8003c86:	4606      	mov	r6, r0
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d1e1      	bne.n	8003c50 <__ssputs_r+0x70>
 8003c8c:	6921      	ldr	r1, [r4, #16]
 8003c8e:	4650      	mov	r0, sl
 8003c90:	f000 fabe 	bl	8004210 <_free_r>
 8003c94:	e7c7      	b.n	8003c26 <__ssputs_r+0x46>
	...

08003c98 <_svfiprintf_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	4698      	mov	r8, r3
 8003c9e:	898b      	ldrh	r3, [r1, #12]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	b09d      	sub	sp, #116	; 0x74
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	4614      	mov	r4, r2
 8003caa:	d50e      	bpl.n	8003cca <_svfiprintf_r+0x32>
 8003cac:	690b      	ldr	r3, [r1, #16]
 8003cae:	b963      	cbnz	r3, 8003cca <_svfiprintf_r+0x32>
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	f000 fb19 	bl	80042e8 <_malloc_r>
 8003cb6:	6028      	str	r0, [r5, #0]
 8003cb8:	6128      	str	r0, [r5, #16]
 8003cba:	b920      	cbnz	r0, 8003cc6 <_svfiprintf_r+0x2e>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	e0d1      	b.n	8003e6a <_svfiprintf_r+0x1d2>
 8003cc6:	2340      	movs	r3, #64	; 0x40
 8003cc8:	616b      	str	r3, [r5, #20]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8003cce:	2320      	movs	r3, #32
 8003cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cd8:	2330      	movs	r3, #48	; 0x30
 8003cda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e84 <_svfiprintf_r+0x1ec>
 8003cde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ce2:	f04f 0901 	mov.w	r9, #1
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	469a      	mov	sl, r3
 8003cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cee:	b10a      	cbz	r2, 8003cf4 <_svfiprintf_r+0x5c>
 8003cf0:	2a25      	cmp	r2, #37	; 0x25
 8003cf2:	d1f9      	bne.n	8003ce8 <_svfiprintf_r+0x50>
 8003cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8003cf8:	d00b      	beq.n	8003d12 <_svfiprintf_r+0x7a>
 8003cfa:	465b      	mov	r3, fp
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4629      	mov	r1, r5
 8003d00:	4638      	mov	r0, r7
 8003d02:	f7ff ff6d 	bl	8003be0 <__ssputs_r>
 8003d06:	3001      	adds	r0, #1
 8003d08:	f000 80aa 	beq.w	8003e60 <_svfiprintf_r+0x1c8>
 8003d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d0e:	445a      	add	r2, fp
 8003d10:	9209      	str	r2, [sp, #36]	; 0x24
 8003d12:	f89a 3000 	ldrb.w	r3, [sl]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80a2 	beq.w	8003e60 <_svfiprintf_r+0x1c8>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d26:	f10a 0a01 	add.w	sl, sl, #1
 8003d2a:	9304      	str	r3, [sp, #16]
 8003d2c:	9307      	str	r3, [sp, #28]
 8003d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d32:	931a      	str	r3, [sp, #104]	; 0x68
 8003d34:	4654      	mov	r4, sl
 8003d36:	2205      	movs	r2, #5
 8003d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d3c:	4851      	ldr	r0, [pc, #324]	; (8003e84 <_svfiprintf_r+0x1ec>)
 8003d3e:	f7fc fa6f 	bl	8000220 <memchr>
 8003d42:	9a04      	ldr	r2, [sp, #16]
 8003d44:	b9d8      	cbnz	r0, 8003d7e <_svfiprintf_r+0xe6>
 8003d46:	06d0      	lsls	r0, r2, #27
 8003d48:	bf44      	itt	mi
 8003d4a:	2320      	movmi	r3, #32
 8003d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d50:	0711      	lsls	r1, r2, #28
 8003d52:	bf44      	itt	mi
 8003d54:	232b      	movmi	r3, #43	; 0x2b
 8003d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d60:	d015      	beq.n	8003d8e <_svfiprintf_r+0xf6>
 8003d62:	9a07      	ldr	r2, [sp, #28]
 8003d64:	4654      	mov	r4, sl
 8003d66:	2000      	movs	r0, #0
 8003d68:	f04f 0c0a 	mov.w	ip, #10
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d72:	3b30      	subs	r3, #48	; 0x30
 8003d74:	2b09      	cmp	r3, #9
 8003d76:	d94e      	bls.n	8003e16 <_svfiprintf_r+0x17e>
 8003d78:	b1b0      	cbz	r0, 8003da8 <_svfiprintf_r+0x110>
 8003d7a:	9207      	str	r2, [sp, #28]
 8003d7c:	e014      	b.n	8003da8 <_svfiprintf_r+0x110>
 8003d7e:	eba0 0308 	sub.w	r3, r0, r8
 8003d82:	fa09 f303 	lsl.w	r3, r9, r3
 8003d86:	4313      	orrs	r3, r2
 8003d88:	9304      	str	r3, [sp, #16]
 8003d8a:	46a2      	mov	sl, r4
 8003d8c:	e7d2      	b.n	8003d34 <_svfiprintf_r+0x9c>
 8003d8e:	9b03      	ldr	r3, [sp, #12]
 8003d90:	1d19      	adds	r1, r3, #4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	9103      	str	r1, [sp, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfbb      	ittet	lt
 8003d9a:	425b      	neglt	r3, r3
 8003d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003da0:	9307      	strge	r3, [sp, #28]
 8003da2:	9307      	strlt	r3, [sp, #28]
 8003da4:	bfb8      	it	lt
 8003da6:	9204      	strlt	r2, [sp, #16]
 8003da8:	7823      	ldrb	r3, [r4, #0]
 8003daa:	2b2e      	cmp	r3, #46	; 0x2e
 8003dac:	d10c      	bne.n	8003dc8 <_svfiprintf_r+0x130>
 8003dae:	7863      	ldrb	r3, [r4, #1]
 8003db0:	2b2a      	cmp	r3, #42	; 0x2a
 8003db2:	d135      	bne.n	8003e20 <_svfiprintf_r+0x188>
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	1d1a      	adds	r2, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	9203      	str	r2, [sp, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bfb8      	it	lt
 8003dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dc4:	3402      	adds	r4, #2
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e94 <_svfiprintf_r+0x1fc>
 8003dcc:	7821      	ldrb	r1, [r4, #0]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	f7fc fa25 	bl	8000220 <memchr>
 8003dd6:	b140      	cbz	r0, 8003dea <_svfiprintf_r+0x152>
 8003dd8:	2340      	movs	r3, #64	; 0x40
 8003dda:	eba0 000a 	sub.w	r0, r0, sl
 8003dde:	fa03 f000 	lsl.w	r0, r3, r0
 8003de2:	9b04      	ldr	r3, [sp, #16]
 8003de4:	4303      	orrs	r3, r0
 8003de6:	3401      	adds	r4, #1
 8003de8:	9304      	str	r3, [sp, #16]
 8003dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dee:	4826      	ldr	r0, [pc, #152]	; (8003e88 <_svfiprintf_r+0x1f0>)
 8003df0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003df4:	2206      	movs	r2, #6
 8003df6:	f7fc fa13 	bl	8000220 <memchr>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d038      	beq.n	8003e70 <_svfiprintf_r+0x1d8>
 8003dfe:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <_svfiprintf_r+0x1f4>)
 8003e00:	bb1b      	cbnz	r3, 8003e4a <_svfiprintf_r+0x1b2>
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	3307      	adds	r3, #7
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	9303      	str	r3, [sp, #12]
 8003e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e10:	4433      	add	r3, r6
 8003e12:	9309      	str	r3, [sp, #36]	; 0x24
 8003e14:	e767      	b.n	8003ce6 <_svfiprintf_r+0x4e>
 8003e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	e7a5      	b.n	8003d6c <_svfiprintf_r+0xd4>
 8003e20:	2300      	movs	r3, #0
 8003e22:	3401      	adds	r4, #1
 8003e24:	9305      	str	r3, [sp, #20]
 8003e26:	4619      	mov	r1, r3
 8003e28:	f04f 0c0a 	mov.w	ip, #10
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e32:	3a30      	subs	r2, #48	; 0x30
 8003e34:	2a09      	cmp	r2, #9
 8003e36:	d903      	bls.n	8003e40 <_svfiprintf_r+0x1a8>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0c5      	beq.n	8003dc8 <_svfiprintf_r+0x130>
 8003e3c:	9105      	str	r1, [sp, #20]
 8003e3e:	e7c3      	b.n	8003dc8 <_svfiprintf_r+0x130>
 8003e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e44:	4604      	mov	r4, r0
 8003e46:	2301      	movs	r3, #1
 8003e48:	e7f0      	b.n	8003e2c <_svfiprintf_r+0x194>
 8003e4a:	ab03      	add	r3, sp, #12
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	462a      	mov	r2, r5
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <_svfiprintf_r+0x1f8>)
 8003e52:	a904      	add	r1, sp, #16
 8003e54:	4638      	mov	r0, r7
 8003e56:	f3af 8000 	nop.w
 8003e5a:	1c42      	adds	r2, r0, #1
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	d1d6      	bne.n	8003e0e <_svfiprintf_r+0x176>
 8003e60:	89ab      	ldrh	r3, [r5, #12]
 8003e62:	065b      	lsls	r3, r3, #25
 8003e64:	f53f af2c 	bmi.w	8003cc0 <_svfiprintf_r+0x28>
 8003e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e6a:	b01d      	add	sp, #116	; 0x74
 8003e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e70:	ab03      	add	r3, sp, #12
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	462a      	mov	r2, r5
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <_svfiprintf_r+0x1f8>)
 8003e78:	a904      	add	r1, sp, #16
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f000 f87a 	bl	8003f74 <_printf_i>
 8003e80:	e7eb      	b.n	8003e5a <_svfiprintf_r+0x1c2>
 8003e82:	bf00      	nop
 8003e84:	080044c0 	.word	0x080044c0
 8003e88:	080044ca 	.word	0x080044ca
 8003e8c:	00000000 	.word	0x00000000
 8003e90:	08003be1 	.word	0x08003be1
 8003e94:	080044c6 	.word	0x080044c6

08003e98 <_printf_common>:
 8003e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	4616      	mov	r6, r2
 8003e9e:	4699      	mov	r9, r3
 8003ea0:	688a      	ldr	r2, [r1, #8]
 8003ea2:	690b      	ldr	r3, [r1, #16]
 8003ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bfb8      	it	lt
 8003eac:	4613      	movlt	r3, r2
 8003eae:	6033      	str	r3, [r6, #0]
 8003eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	b10a      	cbz	r2, 8003ebe <_printf_common+0x26>
 8003eba:	3301      	adds	r3, #1
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	0699      	lsls	r1, r3, #26
 8003ec2:	bf42      	ittt	mi
 8003ec4:	6833      	ldrmi	r3, [r6, #0]
 8003ec6:	3302      	addmi	r3, #2
 8003ec8:	6033      	strmi	r3, [r6, #0]
 8003eca:	6825      	ldr	r5, [r4, #0]
 8003ecc:	f015 0506 	ands.w	r5, r5, #6
 8003ed0:	d106      	bne.n	8003ee0 <_printf_common+0x48>
 8003ed2:	f104 0a19 	add.w	sl, r4, #25
 8003ed6:	68e3      	ldr	r3, [r4, #12]
 8003ed8:	6832      	ldr	r2, [r6, #0]
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	dc26      	bgt.n	8003f2e <_printf_common+0x96>
 8003ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ee4:	1e13      	subs	r3, r2, #0
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	bf18      	it	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	0692      	lsls	r2, r2, #26
 8003eee:	d42b      	bmi.n	8003f48 <_printf_common+0xb0>
 8003ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	47c0      	blx	r8
 8003efa:	3001      	adds	r0, #1
 8003efc:	d01e      	beq.n	8003f3c <_printf_common+0xa4>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	68e5      	ldr	r5, [r4, #12]
 8003f02:	6832      	ldr	r2, [r6, #0]
 8003f04:	f003 0306 	and.w	r3, r3, #6
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	bf08      	it	eq
 8003f0c:	1aad      	subeq	r5, r5, r2
 8003f0e:	68a3      	ldr	r3, [r4, #8]
 8003f10:	6922      	ldr	r2, [r4, #16]
 8003f12:	bf0c      	ite	eq
 8003f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f18:	2500      	movne	r5, #0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	bfc4      	itt	gt
 8003f1e:	1a9b      	subgt	r3, r3, r2
 8003f20:	18ed      	addgt	r5, r5, r3
 8003f22:	2600      	movs	r6, #0
 8003f24:	341a      	adds	r4, #26
 8003f26:	42b5      	cmp	r5, r6
 8003f28:	d11a      	bne.n	8003f60 <_printf_common+0xc8>
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e008      	b.n	8003f40 <_printf_common+0xa8>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4652      	mov	r2, sl
 8003f32:	4649      	mov	r1, r9
 8003f34:	4638      	mov	r0, r7
 8003f36:	47c0      	blx	r8
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d103      	bne.n	8003f44 <_printf_common+0xac>
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f44:	3501      	adds	r5, #1
 8003f46:	e7c6      	b.n	8003ed6 <_printf_common+0x3e>
 8003f48:	18e1      	adds	r1, r4, r3
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	2030      	movs	r0, #48	; 0x30
 8003f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f52:	4422      	add	r2, r4
 8003f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	e7c7      	b.n	8003ef0 <_printf_common+0x58>
 8003f60:	2301      	movs	r3, #1
 8003f62:	4622      	mov	r2, r4
 8003f64:	4649      	mov	r1, r9
 8003f66:	4638      	mov	r0, r7
 8003f68:	47c0      	blx	r8
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d0e6      	beq.n	8003f3c <_printf_common+0xa4>
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7d9      	b.n	8003f26 <_printf_common+0x8e>
	...

08003f74 <_printf_i>:
 8003f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	7e0f      	ldrb	r7, [r1, #24]
 8003f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f7c:	2f78      	cmp	r7, #120	; 0x78
 8003f7e:	4691      	mov	r9, r2
 8003f80:	4680      	mov	r8, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	469a      	mov	sl, r3
 8003f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f8a:	d807      	bhi.n	8003f9c <_printf_i+0x28>
 8003f8c:	2f62      	cmp	r7, #98	; 0x62
 8003f8e:	d80a      	bhi.n	8003fa6 <_printf_i+0x32>
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	f000 80d8 	beq.w	8004146 <_printf_i+0x1d2>
 8003f96:	2f58      	cmp	r7, #88	; 0x58
 8003f98:	f000 80a3 	beq.w	80040e2 <_printf_i+0x16e>
 8003f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fa4:	e03a      	b.n	800401c <_printf_i+0xa8>
 8003fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003faa:	2b15      	cmp	r3, #21
 8003fac:	d8f6      	bhi.n	8003f9c <_printf_i+0x28>
 8003fae:	a101      	add	r1, pc, #4	; (adr r1, 8003fb4 <_printf_i+0x40>)
 8003fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb4:	0800400d 	.word	0x0800400d
 8003fb8:	08004021 	.word	0x08004021
 8003fbc:	08003f9d 	.word	0x08003f9d
 8003fc0:	08003f9d 	.word	0x08003f9d
 8003fc4:	08003f9d 	.word	0x08003f9d
 8003fc8:	08003f9d 	.word	0x08003f9d
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08003f9d 	.word	0x08003f9d
 8003fd4:	08003f9d 	.word	0x08003f9d
 8003fd8:	08003f9d 	.word	0x08003f9d
 8003fdc:	08003f9d 	.word	0x08003f9d
 8003fe0:	0800412d 	.word	0x0800412d
 8003fe4:	08004051 	.word	0x08004051
 8003fe8:	0800410f 	.word	0x0800410f
 8003fec:	08003f9d 	.word	0x08003f9d
 8003ff0:	08003f9d 	.word	0x08003f9d
 8003ff4:	0800414f 	.word	0x0800414f
 8003ff8:	08003f9d 	.word	0x08003f9d
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08003f9d 	.word	0x08003f9d
 8004004:	08003f9d 	.word	0x08003f9d
 8004008:	08004117 	.word	0x08004117
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	602a      	str	r2, [r5, #0]
 8004014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800401c:	2301      	movs	r3, #1
 800401e:	e0a3      	b.n	8004168 <_printf_i+0x1f4>
 8004020:	6820      	ldr	r0, [r4, #0]
 8004022:	6829      	ldr	r1, [r5, #0]
 8004024:	0606      	lsls	r6, r0, #24
 8004026:	f101 0304 	add.w	r3, r1, #4
 800402a:	d50a      	bpl.n	8004042 <_printf_i+0xce>
 800402c:	680e      	ldr	r6, [r1, #0]
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	2e00      	cmp	r6, #0
 8004032:	da03      	bge.n	800403c <_printf_i+0xc8>
 8004034:	232d      	movs	r3, #45	; 0x2d
 8004036:	4276      	negs	r6, r6
 8004038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403c:	485e      	ldr	r0, [pc, #376]	; (80041b8 <_printf_i+0x244>)
 800403e:	230a      	movs	r3, #10
 8004040:	e019      	b.n	8004076 <_printf_i+0x102>
 8004042:	680e      	ldr	r6, [r1, #0]
 8004044:	602b      	str	r3, [r5, #0]
 8004046:	f010 0f40 	tst.w	r0, #64	; 0x40
 800404a:	bf18      	it	ne
 800404c:	b236      	sxthne	r6, r6
 800404e:	e7ef      	b.n	8004030 <_printf_i+0xbc>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	6820      	ldr	r0, [r4, #0]
 8004054:	1d19      	adds	r1, r3, #4
 8004056:	6029      	str	r1, [r5, #0]
 8004058:	0601      	lsls	r1, r0, #24
 800405a:	d501      	bpl.n	8004060 <_printf_i+0xec>
 800405c:	681e      	ldr	r6, [r3, #0]
 800405e:	e002      	b.n	8004066 <_printf_i+0xf2>
 8004060:	0646      	lsls	r6, r0, #25
 8004062:	d5fb      	bpl.n	800405c <_printf_i+0xe8>
 8004064:	881e      	ldrh	r6, [r3, #0]
 8004066:	4854      	ldr	r0, [pc, #336]	; (80041b8 <_printf_i+0x244>)
 8004068:	2f6f      	cmp	r7, #111	; 0x6f
 800406a:	bf0c      	ite	eq
 800406c:	2308      	moveq	r3, #8
 800406e:	230a      	movne	r3, #10
 8004070:	2100      	movs	r1, #0
 8004072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004076:	6865      	ldr	r5, [r4, #4]
 8004078:	60a5      	str	r5, [r4, #8]
 800407a:	2d00      	cmp	r5, #0
 800407c:	bfa2      	ittt	ge
 800407e:	6821      	ldrge	r1, [r4, #0]
 8004080:	f021 0104 	bicge.w	r1, r1, #4
 8004084:	6021      	strge	r1, [r4, #0]
 8004086:	b90e      	cbnz	r6, 800408c <_printf_i+0x118>
 8004088:	2d00      	cmp	r5, #0
 800408a:	d04d      	beq.n	8004128 <_printf_i+0x1b4>
 800408c:	4615      	mov	r5, r2
 800408e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004092:	fb03 6711 	mls	r7, r3, r1, r6
 8004096:	5dc7      	ldrb	r7, [r0, r7]
 8004098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800409c:	4637      	mov	r7, r6
 800409e:	42bb      	cmp	r3, r7
 80040a0:	460e      	mov	r6, r1
 80040a2:	d9f4      	bls.n	800408e <_printf_i+0x11a>
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d10b      	bne.n	80040c0 <_printf_i+0x14c>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	07de      	lsls	r6, r3, #31
 80040ac:	d508      	bpl.n	80040c0 <_printf_i+0x14c>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	6861      	ldr	r1, [r4, #4]
 80040b2:	4299      	cmp	r1, r3
 80040b4:	bfde      	ittt	le
 80040b6:	2330      	movle	r3, #48	; 0x30
 80040b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040c0:	1b52      	subs	r2, r2, r5
 80040c2:	6122      	str	r2, [r4, #16]
 80040c4:	f8cd a000 	str.w	sl, [sp]
 80040c8:	464b      	mov	r3, r9
 80040ca:	aa03      	add	r2, sp, #12
 80040cc:	4621      	mov	r1, r4
 80040ce:	4640      	mov	r0, r8
 80040d0:	f7ff fee2 	bl	8003e98 <_printf_common>
 80040d4:	3001      	adds	r0, #1
 80040d6:	d14c      	bne.n	8004172 <_printf_i+0x1fe>
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	b004      	add	sp, #16
 80040de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e2:	4835      	ldr	r0, [pc, #212]	; (80041b8 <_printf_i+0x244>)
 80040e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040e8:	6829      	ldr	r1, [r5, #0]
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80040f0:	6029      	str	r1, [r5, #0]
 80040f2:	061d      	lsls	r5, r3, #24
 80040f4:	d514      	bpl.n	8004120 <_printf_i+0x1ac>
 80040f6:	07df      	lsls	r7, r3, #31
 80040f8:	bf44      	itt	mi
 80040fa:	f043 0320 	orrmi.w	r3, r3, #32
 80040fe:	6023      	strmi	r3, [r4, #0]
 8004100:	b91e      	cbnz	r6, 800410a <_printf_i+0x196>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	f023 0320 	bic.w	r3, r3, #32
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	2310      	movs	r3, #16
 800410c:	e7b0      	b.n	8004070 <_printf_i+0xfc>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	f043 0320 	orr.w	r3, r3, #32
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	2378      	movs	r3, #120	; 0x78
 8004118:	4828      	ldr	r0, [pc, #160]	; (80041bc <_printf_i+0x248>)
 800411a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800411e:	e7e3      	b.n	80040e8 <_printf_i+0x174>
 8004120:	0659      	lsls	r1, r3, #25
 8004122:	bf48      	it	mi
 8004124:	b2b6      	uxthmi	r6, r6
 8004126:	e7e6      	b.n	80040f6 <_printf_i+0x182>
 8004128:	4615      	mov	r5, r2
 800412a:	e7bb      	b.n	80040a4 <_printf_i+0x130>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	6826      	ldr	r6, [r4, #0]
 8004130:	6961      	ldr	r1, [r4, #20]
 8004132:	1d18      	adds	r0, r3, #4
 8004134:	6028      	str	r0, [r5, #0]
 8004136:	0635      	lsls	r5, r6, #24
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	d501      	bpl.n	8004140 <_printf_i+0x1cc>
 800413c:	6019      	str	r1, [r3, #0]
 800413e:	e002      	b.n	8004146 <_printf_i+0x1d2>
 8004140:	0670      	lsls	r0, r6, #25
 8004142:	d5fb      	bpl.n	800413c <_printf_i+0x1c8>
 8004144:	8019      	strh	r1, [r3, #0]
 8004146:	2300      	movs	r3, #0
 8004148:	6123      	str	r3, [r4, #16]
 800414a:	4615      	mov	r5, r2
 800414c:	e7ba      	b.n	80040c4 <_printf_i+0x150>
 800414e:	682b      	ldr	r3, [r5, #0]
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	602a      	str	r2, [r5, #0]
 8004154:	681d      	ldr	r5, [r3, #0]
 8004156:	6862      	ldr	r2, [r4, #4]
 8004158:	2100      	movs	r1, #0
 800415a:	4628      	mov	r0, r5
 800415c:	f7fc f860 	bl	8000220 <memchr>
 8004160:	b108      	cbz	r0, 8004166 <_printf_i+0x1f2>
 8004162:	1b40      	subs	r0, r0, r5
 8004164:	6060      	str	r0, [r4, #4]
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	2300      	movs	r3, #0
 800416c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004170:	e7a8      	b.n	80040c4 <_printf_i+0x150>
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	462a      	mov	r2, r5
 8004176:	4649      	mov	r1, r9
 8004178:	4640      	mov	r0, r8
 800417a:	47d0      	blx	sl
 800417c:	3001      	adds	r0, #1
 800417e:	d0ab      	beq.n	80040d8 <_printf_i+0x164>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	079b      	lsls	r3, r3, #30
 8004184:	d413      	bmi.n	80041ae <_printf_i+0x23a>
 8004186:	68e0      	ldr	r0, [r4, #12]
 8004188:	9b03      	ldr	r3, [sp, #12]
 800418a:	4298      	cmp	r0, r3
 800418c:	bfb8      	it	lt
 800418e:	4618      	movlt	r0, r3
 8004190:	e7a4      	b.n	80040dc <_printf_i+0x168>
 8004192:	2301      	movs	r3, #1
 8004194:	4632      	mov	r2, r6
 8004196:	4649      	mov	r1, r9
 8004198:	4640      	mov	r0, r8
 800419a:	47d0      	blx	sl
 800419c:	3001      	adds	r0, #1
 800419e:	d09b      	beq.n	80040d8 <_printf_i+0x164>
 80041a0:	3501      	adds	r5, #1
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	9903      	ldr	r1, [sp, #12]
 80041a6:	1a5b      	subs	r3, r3, r1
 80041a8:	42ab      	cmp	r3, r5
 80041aa:	dcf2      	bgt.n	8004192 <_printf_i+0x21e>
 80041ac:	e7eb      	b.n	8004186 <_printf_i+0x212>
 80041ae:	2500      	movs	r5, #0
 80041b0:	f104 0619 	add.w	r6, r4, #25
 80041b4:	e7f5      	b.n	80041a2 <_printf_i+0x22e>
 80041b6:	bf00      	nop
 80041b8:	080044d1 	.word	0x080044d1
 80041bc:	080044e2 	.word	0x080044e2

080041c0 <memcpy>:
 80041c0:	440a      	add	r2, r1
 80041c2:	4291      	cmp	r1, r2
 80041c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041c8:	d100      	bne.n	80041cc <memcpy+0xc>
 80041ca:	4770      	bx	lr
 80041cc:	b510      	push	{r4, lr}
 80041ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041d6:	4291      	cmp	r1, r2
 80041d8:	d1f9      	bne.n	80041ce <memcpy+0xe>
 80041da:	bd10      	pop	{r4, pc}

080041dc <memmove>:
 80041dc:	4288      	cmp	r0, r1
 80041de:	b510      	push	{r4, lr}
 80041e0:	eb01 0402 	add.w	r4, r1, r2
 80041e4:	d902      	bls.n	80041ec <memmove+0x10>
 80041e6:	4284      	cmp	r4, r0
 80041e8:	4623      	mov	r3, r4
 80041ea:	d807      	bhi.n	80041fc <memmove+0x20>
 80041ec:	1e43      	subs	r3, r0, #1
 80041ee:	42a1      	cmp	r1, r4
 80041f0:	d008      	beq.n	8004204 <memmove+0x28>
 80041f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041fa:	e7f8      	b.n	80041ee <memmove+0x12>
 80041fc:	4402      	add	r2, r0
 80041fe:	4601      	mov	r1, r0
 8004200:	428a      	cmp	r2, r1
 8004202:	d100      	bne.n	8004206 <memmove+0x2a>
 8004204:	bd10      	pop	{r4, pc}
 8004206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800420a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800420e:	e7f7      	b.n	8004200 <memmove+0x24>

08004210 <_free_r>:
 8004210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004212:	2900      	cmp	r1, #0
 8004214:	d044      	beq.n	80042a0 <_free_r+0x90>
 8004216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421a:	9001      	str	r0, [sp, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f1a1 0404 	sub.w	r4, r1, #4
 8004222:	bfb8      	it	lt
 8004224:	18e4      	addlt	r4, r4, r3
 8004226:	f000 f913 	bl	8004450 <__malloc_lock>
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <_free_r+0x94>)
 800422c:	9801      	ldr	r0, [sp, #4]
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	b933      	cbnz	r3, 8004240 <_free_r+0x30>
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	6014      	str	r4, [r2, #0]
 8004236:	b003      	add	sp, #12
 8004238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800423c:	f000 b90e 	b.w	800445c <__malloc_unlock>
 8004240:	42a3      	cmp	r3, r4
 8004242:	d908      	bls.n	8004256 <_free_r+0x46>
 8004244:	6825      	ldr	r5, [r4, #0]
 8004246:	1961      	adds	r1, r4, r5
 8004248:	428b      	cmp	r3, r1
 800424a:	bf01      	itttt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	1949      	addeq	r1, r1, r5
 8004252:	6021      	streq	r1, [r4, #0]
 8004254:	e7ed      	b.n	8004232 <_free_r+0x22>
 8004256:	461a      	mov	r2, r3
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b10b      	cbz	r3, 8004260 <_free_r+0x50>
 800425c:	42a3      	cmp	r3, r4
 800425e:	d9fa      	bls.n	8004256 <_free_r+0x46>
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	1855      	adds	r5, r2, r1
 8004264:	42a5      	cmp	r5, r4
 8004266:	d10b      	bne.n	8004280 <_free_r+0x70>
 8004268:	6824      	ldr	r4, [r4, #0]
 800426a:	4421      	add	r1, r4
 800426c:	1854      	adds	r4, r2, r1
 800426e:	42a3      	cmp	r3, r4
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	d1e0      	bne.n	8004236 <_free_r+0x26>
 8004274:	681c      	ldr	r4, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	4421      	add	r1, r4
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	e7da      	b.n	8004236 <_free_r+0x26>
 8004280:	d902      	bls.n	8004288 <_free_r+0x78>
 8004282:	230c      	movs	r3, #12
 8004284:	6003      	str	r3, [r0, #0]
 8004286:	e7d6      	b.n	8004236 <_free_r+0x26>
 8004288:	6825      	ldr	r5, [r4, #0]
 800428a:	1961      	adds	r1, r4, r5
 800428c:	428b      	cmp	r3, r1
 800428e:	bf04      	itt	eq
 8004290:	6819      	ldreq	r1, [r3, #0]
 8004292:	685b      	ldreq	r3, [r3, #4]
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	bf04      	itt	eq
 8004298:	1949      	addeq	r1, r1, r5
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	6054      	str	r4, [r2, #4]
 800429e:	e7ca      	b.n	8004236 <_free_r+0x26>
 80042a0:	b003      	add	sp, #12
 80042a2:	bd30      	pop	{r4, r5, pc}
 80042a4:	200001d8 	.word	0x200001d8

080042a8 <sbrk_aligned>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	4e0e      	ldr	r6, [pc, #56]	; (80042e4 <sbrk_aligned+0x3c>)
 80042ac:	460c      	mov	r4, r1
 80042ae:	6831      	ldr	r1, [r6, #0]
 80042b0:	4605      	mov	r5, r0
 80042b2:	b911      	cbnz	r1, 80042ba <sbrk_aligned+0x12>
 80042b4:	f000 f8bc 	bl	8004430 <_sbrk_r>
 80042b8:	6030      	str	r0, [r6, #0]
 80042ba:	4621      	mov	r1, r4
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 f8b7 	bl	8004430 <_sbrk_r>
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	d00a      	beq.n	80042dc <sbrk_aligned+0x34>
 80042c6:	1cc4      	adds	r4, r0, #3
 80042c8:	f024 0403 	bic.w	r4, r4, #3
 80042cc:	42a0      	cmp	r0, r4
 80042ce:	d007      	beq.n	80042e0 <sbrk_aligned+0x38>
 80042d0:	1a21      	subs	r1, r4, r0
 80042d2:	4628      	mov	r0, r5
 80042d4:	f000 f8ac 	bl	8004430 <_sbrk_r>
 80042d8:	3001      	adds	r0, #1
 80042da:	d101      	bne.n	80042e0 <sbrk_aligned+0x38>
 80042dc:	f04f 34ff 	mov.w	r4, #4294967295
 80042e0:	4620      	mov	r0, r4
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	200001dc 	.word	0x200001dc

080042e8 <_malloc_r>:
 80042e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ec:	1ccd      	adds	r5, r1, #3
 80042ee:	f025 0503 	bic.w	r5, r5, #3
 80042f2:	3508      	adds	r5, #8
 80042f4:	2d0c      	cmp	r5, #12
 80042f6:	bf38      	it	cc
 80042f8:	250c      	movcc	r5, #12
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	4607      	mov	r7, r0
 80042fe:	db01      	blt.n	8004304 <_malloc_r+0x1c>
 8004300:	42a9      	cmp	r1, r5
 8004302:	d905      	bls.n	8004310 <_malloc_r+0x28>
 8004304:	230c      	movs	r3, #12
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	2600      	movs	r6, #0
 800430a:	4630      	mov	r0, r6
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004310:	4e2e      	ldr	r6, [pc, #184]	; (80043cc <_malloc_r+0xe4>)
 8004312:	f000 f89d 	bl	8004450 <__malloc_lock>
 8004316:	6833      	ldr	r3, [r6, #0]
 8004318:	461c      	mov	r4, r3
 800431a:	bb34      	cbnz	r4, 800436a <_malloc_r+0x82>
 800431c:	4629      	mov	r1, r5
 800431e:	4638      	mov	r0, r7
 8004320:	f7ff ffc2 	bl	80042a8 <sbrk_aligned>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	4604      	mov	r4, r0
 8004328:	d14d      	bne.n	80043c6 <_malloc_r+0xde>
 800432a:	6834      	ldr	r4, [r6, #0]
 800432c:	4626      	mov	r6, r4
 800432e:	2e00      	cmp	r6, #0
 8004330:	d140      	bne.n	80043b4 <_malloc_r+0xcc>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	4631      	mov	r1, r6
 8004336:	4638      	mov	r0, r7
 8004338:	eb04 0803 	add.w	r8, r4, r3
 800433c:	f000 f878 	bl	8004430 <_sbrk_r>
 8004340:	4580      	cmp	r8, r0
 8004342:	d13a      	bne.n	80043ba <_malloc_r+0xd2>
 8004344:	6821      	ldr	r1, [r4, #0]
 8004346:	3503      	adds	r5, #3
 8004348:	1a6d      	subs	r5, r5, r1
 800434a:	f025 0503 	bic.w	r5, r5, #3
 800434e:	3508      	adds	r5, #8
 8004350:	2d0c      	cmp	r5, #12
 8004352:	bf38      	it	cc
 8004354:	250c      	movcc	r5, #12
 8004356:	4629      	mov	r1, r5
 8004358:	4638      	mov	r0, r7
 800435a:	f7ff ffa5 	bl	80042a8 <sbrk_aligned>
 800435e:	3001      	adds	r0, #1
 8004360:	d02b      	beq.n	80043ba <_malloc_r+0xd2>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	442b      	add	r3, r5
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e00e      	b.n	8004388 <_malloc_r+0xa0>
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	1b52      	subs	r2, r2, r5
 800436e:	d41e      	bmi.n	80043ae <_malloc_r+0xc6>
 8004370:	2a0b      	cmp	r2, #11
 8004372:	d916      	bls.n	80043a2 <_malloc_r+0xba>
 8004374:	1961      	adds	r1, r4, r5
 8004376:	42a3      	cmp	r3, r4
 8004378:	6025      	str	r5, [r4, #0]
 800437a:	bf18      	it	ne
 800437c:	6059      	strne	r1, [r3, #4]
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	bf08      	it	eq
 8004382:	6031      	streq	r1, [r6, #0]
 8004384:	5162      	str	r2, [r4, r5]
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	4638      	mov	r0, r7
 800438a:	f104 060b 	add.w	r6, r4, #11
 800438e:	f000 f865 	bl	800445c <__malloc_unlock>
 8004392:	f026 0607 	bic.w	r6, r6, #7
 8004396:	1d23      	adds	r3, r4, #4
 8004398:	1af2      	subs	r2, r6, r3
 800439a:	d0b6      	beq.n	800430a <_malloc_r+0x22>
 800439c:	1b9b      	subs	r3, r3, r6
 800439e:	50a3      	str	r3, [r4, r2]
 80043a0:	e7b3      	b.n	800430a <_malloc_r+0x22>
 80043a2:	6862      	ldr	r2, [r4, #4]
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	bf0c      	ite	eq
 80043a8:	6032      	streq	r2, [r6, #0]
 80043aa:	605a      	strne	r2, [r3, #4]
 80043ac:	e7ec      	b.n	8004388 <_malloc_r+0xa0>
 80043ae:	4623      	mov	r3, r4
 80043b0:	6864      	ldr	r4, [r4, #4]
 80043b2:	e7b2      	b.n	800431a <_malloc_r+0x32>
 80043b4:	4634      	mov	r4, r6
 80043b6:	6876      	ldr	r6, [r6, #4]
 80043b8:	e7b9      	b.n	800432e <_malloc_r+0x46>
 80043ba:	230c      	movs	r3, #12
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	4638      	mov	r0, r7
 80043c0:	f000 f84c 	bl	800445c <__malloc_unlock>
 80043c4:	e7a1      	b.n	800430a <_malloc_r+0x22>
 80043c6:	6025      	str	r5, [r4, #0]
 80043c8:	e7de      	b.n	8004388 <_malloc_r+0xa0>
 80043ca:	bf00      	nop
 80043cc:	200001d8 	.word	0x200001d8

080043d0 <_realloc_r>:
 80043d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d4:	4680      	mov	r8, r0
 80043d6:	4614      	mov	r4, r2
 80043d8:	460e      	mov	r6, r1
 80043da:	b921      	cbnz	r1, 80043e6 <_realloc_r+0x16>
 80043dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e0:	4611      	mov	r1, r2
 80043e2:	f7ff bf81 	b.w	80042e8 <_malloc_r>
 80043e6:	b92a      	cbnz	r2, 80043f4 <_realloc_r+0x24>
 80043e8:	f7ff ff12 	bl	8004210 <_free_r>
 80043ec:	4625      	mov	r5, r4
 80043ee:	4628      	mov	r0, r5
 80043f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043f4:	f000 f838 	bl	8004468 <_malloc_usable_size_r>
 80043f8:	4284      	cmp	r4, r0
 80043fa:	4607      	mov	r7, r0
 80043fc:	d802      	bhi.n	8004404 <_realloc_r+0x34>
 80043fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004402:	d812      	bhi.n	800442a <_realloc_r+0x5a>
 8004404:	4621      	mov	r1, r4
 8004406:	4640      	mov	r0, r8
 8004408:	f7ff ff6e 	bl	80042e8 <_malloc_r>
 800440c:	4605      	mov	r5, r0
 800440e:	2800      	cmp	r0, #0
 8004410:	d0ed      	beq.n	80043ee <_realloc_r+0x1e>
 8004412:	42bc      	cmp	r4, r7
 8004414:	4622      	mov	r2, r4
 8004416:	4631      	mov	r1, r6
 8004418:	bf28      	it	cs
 800441a:	463a      	movcs	r2, r7
 800441c:	f7ff fed0 	bl	80041c0 <memcpy>
 8004420:	4631      	mov	r1, r6
 8004422:	4640      	mov	r0, r8
 8004424:	f7ff fef4 	bl	8004210 <_free_r>
 8004428:	e7e1      	b.n	80043ee <_realloc_r+0x1e>
 800442a:	4635      	mov	r5, r6
 800442c:	e7df      	b.n	80043ee <_realloc_r+0x1e>
	...

08004430 <_sbrk_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4d06      	ldr	r5, [pc, #24]	; (800444c <_sbrk_r+0x1c>)
 8004434:	2300      	movs	r3, #0
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	f7fc fc42 	bl	8000cc4 <_sbrk>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_sbrk_r+0x1a>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_sbrk_r+0x1a>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	200001e0 	.word	0x200001e0

08004450 <__malloc_lock>:
 8004450:	4801      	ldr	r0, [pc, #4]	; (8004458 <__malloc_lock+0x8>)
 8004452:	f000 b811 	b.w	8004478 <__retarget_lock_acquire_recursive>
 8004456:	bf00      	nop
 8004458:	200001e4 	.word	0x200001e4

0800445c <__malloc_unlock>:
 800445c:	4801      	ldr	r0, [pc, #4]	; (8004464 <__malloc_unlock+0x8>)
 800445e:	f000 b80c 	b.w	800447a <__retarget_lock_release_recursive>
 8004462:	bf00      	nop
 8004464:	200001e4 	.word	0x200001e4

08004468 <_malloc_usable_size_r>:
 8004468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800446c:	1f18      	subs	r0, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	bfbc      	itt	lt
 8004472:	580b      	ldrlt	r3, [r1, r0]
 8004474:	18c0      	addlt	r0, r0, r3
 8004476:	4770      	bx	lr

08004478 <__retarget_lock_acquire_recursive>:
 8004478:	4770      	bx	lr

0800447a <__retarget_lock_release_recursive>:
 800447a:	4770      	bx	lr

0800447c <_init>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr

08004488 <_fini>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr
